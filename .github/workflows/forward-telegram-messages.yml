name: Forward Telegram Messages

on:
  schedule:
    - cron: '* * * * *' # Runs every minute
  workflow_dispatch:

jobs:
  forward_messages:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install requests beautifulsoup4

      - name: Forward messages
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          EMAIL: ${{ secrets.EMAIL }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          TELEGRAM_CHAT_ID_1: ${{ secrets.TELEGRAM_CHAT_ID_1 }}
          TELEGRAM_CHAT_ID_2: ${{ secrets.TELEGRAM_CHAT_ID_2 }}
        run: |
          python - <<EOF
          import os
          import smtplib
          from email.mime.multipart import MIMEMultipart
          from email.mime.text import MIMEText
          import requests
          from bs4 import BeautifulSoup
          import hashlib

          def send_email(subject, body, to_email):
              from_email = os.getenv('EMAIL')
              email_password = os.getenv('EMAIL_PASSWORD')
              
              if not from_email or not email_password:
                  print('Email credentials are not set in the environment variables.')
                  return
              
              # Create the email message
              msg = MIMEMultipart()
              msg['From'] = from_email
              msg['To'] = to_email
              msg['Subject'] = subject
              msg.attach(MIMEText(body, 'plain'))
              
              try:
                  # Set up the SMTP server
                  server = smtplib.SMTP('smtp.gmail.com', 587)
                  server.starttls()
                  server.login(from_email, email_password)
                  
                  # Send the email
                  server.send_message(msg)
                  server.quit()
                  print(f'Email sent successfully to {to_email}')
              except Exception as e:
                  print(f'Failed to send email: {e}')

          # List of channels and their respective chat IDs
          channels = [
              {'url': 'https://t.me/s/Rasoolkgfx_3', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_1')},
              {'url': 'https://t.me/s/forexero', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_2')},
              {'url': 'https://t.me/s/pipxpert', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_2')},
              {'url': 'https://t.me/s/XAUUSDP', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_2')},
              {'url': 'https://t.me/s/safemnaagment', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_2')},
              {'url': 'https://t.me/s/Sarfarazfxo1', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_2')},
              {'url': 'https://t.me/s/MrKingTeamGoldSignals', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_2')},
              {'url': 'https://t.me/s/forexTrading09hub', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_2')},
              {'url': 'https://t.me/s/ICTSmartMoneyStudent', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_2')},
              {'url': 'https://t.me/s/TFXC_FREE', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_2')},
              {'url': 'https://t.me/s/gold_pro_trader_official', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_2')},
              {'url': 'https://t.me/s/Goldman1134', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_2')},
              {'url': 'https://t.me/s/forexflights01', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_2')},
              {'url': 'https://t.me/s/GOLDPROLUCKY', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_2')},
              {'url': 'https://t.me/s/WolfTrading06', 'chat_id': os.getenv('TELEGRAM_CHAT_ID_2')},
          ]

          bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
          for channel in channels:
              telegram_channel_url = channel['url']
              chat_id = channel['chat_id']
              
              # Fetch the latest messages from the public URL
              response = requests.get(telegram_channel_url)
              soup = BeautifulSoup(response.text, 'html.parser')

              # Extract the latest message (assuming it's the last <div> with class "tgme_widget_message_text")
              latest_message_divs = soup.find_all('div', class_='tgme_widget_message_text')
              if latest_message_divs:
                  latest_message = latest_message_divs[-1].get_text(strip=True)
                  latest_message_hash = hashlib.md5(latest_message.encode()).hexdigest()

                  # Read the last message hash from file
                  last_message_hash_file = f'last_message_hash_{telegram_channel_url}.txt'
                  if os.path.exists(last_message_hash_file):
                      with open(last_message_hash_file, 'r') as file:
                          last_message_hash = file.read().strip()
                  else:
                      last_message_hash = ''

                  if latest_message_hash != last_message_hash:
                      # Update the last message hash file
                      with open(last_message_hash_file, 'w') as file:
                          file.write(latest_message_hash)

                      # Send the message to the target Telegram channel
                      send_message_url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
                      response = requests.post(send_message_url, data={'chat_id': chat_id, 'text': latest_message})
                      if response.status_code != 200:
                          print(f'Failed to send message to {chat_id}: {response.text}')
                      else:
                          print(f'Message sent successfully to {chat_id}')

                      # Send the latest message to the specified email
                      to_email = os.getenv('TO_EMAIL')
                      send_email('Latest Telegram Message', latest_message, to_email)
                  else:
                      print(f'No new messages to forward for {chat_id}')
              else:
                  print(f'No messages found for {chat_id}')
          EOF

      - name: Commit updated hashes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add last_message_hash_*.txt
          git commit -m 'Update last message hashes'
          git push https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
